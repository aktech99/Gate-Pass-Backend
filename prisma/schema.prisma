// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String     @id @default(cuid())
  email           String     @unique
  name            String     @db.VarChar(100)
  password        String     
  role            UserRole   @default(STUDENT)
  createdAt       DateTime   @default(now()) @map("created_at")
  updatedAt       DateTime   @updatedAt @map("updated_at")
  isApproved      Boolean    @default(false) @map("is_approved")
  requestsSent    GatePass[] @relation("StudentRequests")
  requestsApproved GatePass[] @relation("TeacherApprovals")
  scanLogs        ScanLog[]  @relation("SecurityScans")

  @@index([email])
  @@index([role])
  @@map("users")
}

model GatePass {
  id          String      @id @default(cuid())
  studentId   String      @map("student_id")
  teacherId   String?     @map("teacher_id")
  reason      String      @db.Text
  status      PassStatus  @default(PENDING)
  remarks     String?     @db.Text
  requestDate DateTime    @map("request_date")
  validUntil  DateTime    @map("valid_until")
  qrCode      String?     @map("qr_code") @db.VarChar(255)
  usedAt      DateTime?   @map("used_at")
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  
  student     User        @relation("StudentRequests", fields: [studentId], references: [id], onDelete: Cascade)
  teacher     User?       @relation("TeacherApprovals", fields: [teacherId], references: [id], onDelete: SetNull)
  scanLogs    ScanLog[]

  @@index([studentId])
  @@index([teacherId])
  @@index([status])
  @@index([validUntil])
  @@index([qrCode])
  @@map("gate_passes")
}

model ScanLog {
  id         String   @id @default(cuid())
  gatePassId String   @map("gate_pass_id")
  securityId String   @map("security_id")
  scannedAt  DateTime @map("scanned_at") @default(now())
  
  gatePass   GatePass @relation(fields: [gatePassId], references: [id], onDelete: Cascade)
  security   User     @relation("SecurityScans", fields: [securityId], references: [id], onDelete: Cascade)

  @@index([gatePassId])
  @@index([securityId])
  @@index([scannedAt])
  @@map("scan_logs")
}

enum UserRole {
  SUPER_ADMIN @map("super_admin")
  TEACHER     @map("teacher")
  STUDENT     @map("student")
  SECURITY    @map("security")

  @@map("user_roles")
}

enum PassStatus {
  PENDING   @map("pending")
  APPROVED  @map("approved")
  REJECTED  @map("rejected")
  USED      @map("used")
  EXPIRED   @map("expired")

  @@map("pass_statuses")
}
